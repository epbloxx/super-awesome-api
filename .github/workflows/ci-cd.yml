name: CI/CD
 
on: 
  push:
    branches: [ "*", "*/*" ]
  pull_request:
    branches: [ main,development ]  
  workflow_dispatch: 

jobs: 

  build: 
    runs-on: ubuntu-latest
    environment: build
    outputs:
      branch: ${{ steps.cake_build.outputs.branch }}
    steps: 
      - uses: actions/checkout@v2
      - run:  git fetch --unshallow
          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.8.1'
          includePrerelease: true
           
      - name: cake build
        id: cake_build   
        run:  |
            # make file runnable, might not be necessary
            chmod +x "${GITHUB_WORKSPACE}/build.sh"

            # run build script
            "${GITHUB_WORKSPACE}/build.sh"
            # output branch name
            echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        env:
          MY_GET_API_KEY: '${{ secrets.MY_GET_API_KEY }}' # MyGetFeed
          System : 'supercool'
          Platform : 'marat'
          Subsystem : 'webapi'
          Environment : 'test'
          AWS_ACCESS_KEY_ID :  '${{ secrets.AWS_ACCESS_KEY_ID }}'
          AWS_SECRET_ACCESS_KEY :  '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          AWS_DEFAULT_REGION : 'eu-central-1'
          AWS_ECR_ROLE_ARN :  '${{ secrets.AWS_ECR_ROLE_ARN }}'

  deploy-test: 
    runs-on: ubuntu-latest
    environment: test
    needs: build
    if: ${{ needs.build.outputs.branch == 'main' }}
    steps: 
      - uses: actions/checkout@v2
      - run:  git fetch --unshallow
    
     
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.8.1'
          includePrerelease: true          
   
      - name: cake deploy
        
        run:  |
            # make file runnable, might not be necessary
            chmod +x "${GITHUB_WORKSPACE}/build.sh"

            # run deploy script
            "${GITHUB_WORKSPACE}/build.sh" -t VerifyAndReleaseNext
        env:
          System : 'supercool'
          Platform : 'bloxx'
          Subsystem : 'webapi'
          MY_GET_API_KEY: '${{ secrets.MY_GET_API_KEY }}' # MyGetFeed
          Environment : 'test'
          ClusterName : 'test-bloxx-ecs-cluster'
          ClusterArn : '${{ secrets.CLUSTER_ARN }}'
          ApiGatewayDomainName : 'supercool.test.parknowportal.com'
          AWS_ACCESS_KEY_ID :  '${{ secrets.AWS_ACCESS_KEY_ID }}'
          AWS_SECRET_ACCESS_KEY :  '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          AWS_DEFAULT_REGION : 'eu-central-1'
          VpcId :  '${{ secrets.VPC_ID }}'
          SubnetIds :  '${{ secrets.SUBNET_IDS}}'
          HttpsListenerArn : '${{ secrets.HTTP_LISTENER_ARN}}'
          LoadbalancerDns : '${{ secrets.LOAD_BALANCER_DNS}}'
          AWS_DEPLOY_ROLE_ARN :  '${{ secrets.AWS_DEPLOY_ROLE_ARN }}'

  deploy-sit: 
    runs-on: ubuntu-latest
    environment:  sit
    needs: deploy-test
    if: ${{ needs.build.outputs.branch == 'main' }}
    steps: 
      - uses: actions/checkout@v2
      - run:  git fetch --unshallow
    
     
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.8.1'
          includePrerelease: true          
   
      - name: cake deploy
        
        run:  |
            # make file runnable, might not be necessary
            chmod +x "${GITHUB_WORKSPACE}/build.sh"

            # run deploy script
            "${GITHUB_WORKSPACE}/build.sh" -t VerifyAndReleaseNext
        env:
          System : 'supercool'
          Platform : 'bloxx'
          Subsystem : 'webapi'
          MY_GET_API_KEY: '${{ secrets.MY_GET_API_KEY }}' # MyGetFeed
          Environment : 'test'
          ClusterName : 'sit-bloxx-ecs-cluster'
          ClusterArn : '${{ secrets.CLUSTER_ARN }}'
          ApiGatewayDomainName : 'supercool.sit.parknowportal.com'
          AWS_ACCESS_KEY_ID :  '${{ secrets.AWS_ACCESS_KEY_ID }}'
          AWS_SECRET_ACCESS_KEY :  '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          AWS_DEFAULT_REGION : 'eu-central-1'
          VpcId :  '${{ secrets.VPC_ID }}'
          SubnetIds :  '${{ secrets.SUBNET_IDS}}'
          HttpsListenerArn : '${{ secrets.HTTP_LISTENER_ARN}}'
          LoadbalancerDns : '${{ secrets.LOAD_BALANCER_DNS}}'
          AWS_DEPLOY_ROLE_ARN :  '${{ secrets.AWS_DEPLOY_ROLE_ARN }}'          


